#!/usr/bin/env node/** * Bundle Size Monitor Script *  * This script monitors bundle size changes and warns about large increases. * Run this as part of your CI/CD pipeline to catch bundle bloat early. */import fs from 'fs';import path from 'path';import { fileURLToPath } from 'url';const __filename = fileURLToPath(import.meta.url);const __dirname = path.dirname(__filename);const DIST_DIR = path.join(__dirname, '..', 'dist', 'public', 'assets');const BUNDLE_SIZE_LIMIT = 500; // KBconst CHUNK_SIZE_LIMIT = 200; // KBfunction formatSize(bytes) {  return (bytes / 1024).toFixed(2) + ' KB';}function analyzeBundleSize() {  if (!fs.existsSync(DIST_DIR)) {    console.error('❌ Build directory not found. Run `npm run build` first.');    process.exit(1);  }  const files = fs.readdirSync(DIST_DIR);  const jsFiles = files.filter(f => f.endsWith('.js'));  const cssFiles = files.filter(f => f.endsWith('.css'));  console.log('📊 Bundle Size Analysis');  console.log('='.repeat(50));  let totalSize = 0;  let hasLargeChunks = false;  // Analyze JS files  console.log('\n📄 JavaScript Files:');  jsFiles.forEach(file => {    const filePath = path.join(DIST_DIR, file);    const stats = fs.statSync(filePath);    const sizeKB = stats.size / 1024;    totalSize += stats.size;    const status = sizeKB > CHUNK_SIZE_LIMIT ? '⚠️ ' : '✅ ';    console.log(`${status}${file}: ${formatSize(stats.size)}`);    if (sizeKB > CHUNK_SIZE_LIMIT) {      hasLargeChunks = true;    }  });  // Analyze CSS files  console.log('\n🎨 CSS Files:');  cssFiles.forEach(file => {    const filePath = path.join(DIST_DIR, file);    const stats = fs.statSync(filePath);    totalSize += stats.size;    console.log(`✅ ${file}: ${formatSize(stats.size)}`);  });  const totalSizeKB = totalSize / 1024;  console.log('\n📊 Summary:');  console.log(`Total Bundle Size: ${formatSize(totalSize)}`);  // Check limits  if (totalSizeKB > BUNDLE_SIZE_LIMIT) {    console.log(`❌ Bundle size exceeds limit (${BUNDLE_SIZE_LIMIT} KB)`);    process.exit(1);  }  if (hasLargeChunks) {    console.log(`⚠️  Some chunks exceed recommended size (${CHUNK_SIZE_LIMIT} KB)`);    console.log('   Consider code splitting or removing unused dependencies.');  }  console.log('✅ Bundle size analysis complete!');  // Generate recommendations  generateRecommendations(totalSizeKB, hasLargeChunks);}function generateRecommendations(totalSizeKB, hasLargeChunks) {  console.log('\n💡 Optimization Recommendations:');  if (totalSizeKB > 400) {    console.log('• Consider implementing route-based code splitting');    console.log('• Review and remove unused dependencies');    console.log('• Enable aggressive tree shaking');  }  if (hasLargeChunks) {    console.log('• Split large chunks into smaller ones');    console.log('• Move vendor libraries to separate chunks');    console.log('• Consider lazy loading for non-critical components');  }  console.log('• Run bundle analyzer: npm run build && open dist/bundle-analysis.html');  console.log('• Monitor bundle size in CI/CD pipeline');}// Run the analysisanalyzeBundleSize();
/** @format */
